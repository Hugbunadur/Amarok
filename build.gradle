
plugins {
	id "org.ajoberstar.github-pages" version "0.11.2"

}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply from: 'http://tellurianring.com/projects/gradle-plugins/gradle-release/apply.groovy'

repositories {
  	jcenter()
}
githubPages {
  repoUri = 'git@github.com:Hugbunadur/Amarok.git'      
  pages {
     from(file('Amarok')) {
     	into '.'                                    
     }
  }
}
task publish(type: GradleBuild) {           
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}

sourceSets {
    	selenium
    	seleniumXvfb
}

dependencies {
	

        compile 'org.slf4j:slf4j-api:1.7.5'
        compile fileTree(dir: 'lib', include: ['*.jar'])

        // gson
        compile 'com.google.code.gson:gson:2.3'
	// Adding Spark dependency
    	compile 'com.sparkjava:spark-core:1.1.1'

        // selenium
        seleniumCompile 'junit:junit:4.11'
    	seleniumCompile 'org.seleniumhq.selenium:selenium-java:2.39.0'
	// selendiumXvfb
        seleniumXvfbCompile 'junit:junit:4.11'
    	seleniumXvfbCompile 'org.seleniumhq.selenium:selenium-java:2.39.0'
         // tests
        testCompile 'junit:junit:4.11'

        // taskrun
}



mainClassName = "is.ru.tictactoe.PlayGame"

task selenium(type: Test, dependsOn: installApp) {
    	testClassesDir = sourceSets.selenium.output.classesDir
    	classpath = sourceSets.selenium.runtimeClasspath

    	ant.condition(property: "os", value: "windows") { os(family: "windows") }
    	ant.condition(property: "os", value: "unix"   ) { os(family: "unix")    }

    	doFirst {
        	switch(ant.properties.os) {
            		case 'unix':
                	'build/install/tictactoe/bin/tictactoe &'.execute()
                	break
            		case 'windows':
                	'build\\install\\tictactoe\\bin\\tictactoe.bat'.execute()
               		 break
        }
    }
}

task seleniumXvfb(type: Test, dependsOn: installApp) {
    	testClassesDir = sourceSets.selenium.output.classesDir
    	classpath = sourceSets.selenium.runtimeClasspath

    	environment "DISPLAY", ":99"

    	doFirst {
        	'bin/xvfb start'.execute()
        	'build/install/Amarok/bin/Amarok &'.execute()
    	}
    
    	doLast {
        	'bin/xvfb stop'.execute()
    	}
}

task stage { 
    	dependsOn installApp 
}

test {
    	testLogging {
        	exceptionFormat = 'full'
    	}
}



// jar
def jarDirectory = file('../AmarokJar') 

jar {
	manifest {
 		attributes("Main-Class": "is.ru.tictactoe.PlayGame")
    	} 
}
task runJarFromAnotherDir {
    doFirst{
        if(!jarDirectory.isDirectory()){
            jarDirectory.mkdirs()
        }
    }
    copy {
        from "build/libs/"
        into '../AmarokJar'
    }   
}

applicationDefaultJvmArgs = ["-Dgreeting.language=en"]

task createDocs {
	def docs = file("$buildDir/docs")
	outputs.dir docs
 	doLast {
        	docs.mkdirs()
       		new File(docs, "readme.txt").write("Read me!")
    	}
}

applicationDistribution.from(createDocs) {
	into "docs"
}

run{
	standardInput = System.in	
}

jacoco {
       toolVersion = "0.7.1.201405082137"
       reportsDir = file("$buildDir/codeCoverageReport")
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination "$buildDir/ccReport"
	}
}

test {
     jacoco {
     	    append = false
	    destinationFile = file("$buildDir/codeCoverageReport/ccTest.exec")
	    classDumpFile = file("$buildDir/codeCoverageReport/classpathdumps")
     }
}
